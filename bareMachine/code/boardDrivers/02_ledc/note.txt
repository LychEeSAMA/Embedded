1.关于链接脚本imx6ull.lds的注释
.text：这是一个输出段（output section）的定义，用于存放程序的代码段。通过*(.text)将所有输入目标文件中的.text段合并到最终的可执行文件中。
.rodata ALIGN(4)：这是一个输出段的定义，用于存放只读数据，通常用于存放程序中的常量数据。
(.rodata)表示将所有输入目标文件中的.rodata段（带有任意后缀的rodata）合并到输出文件的.rodata段，并且按照4字节对齐
.data ALIGN(4)：这是一个输出段的定义，用于存放程序的已初始化数据。*(.data)表示将所有输入目标文件中的.data段合并到输出文件的.data段，并且按照4字节对齐。
__bss_start=.和.bss ALIGN(4)：__bss_start=.将当前位置标记为.bss段的起始位置。.bss ALIGN(4)是一个输出段的定义，用于存放程序中未初始化的全局变量。
*(.bss) *(COMMON)表示将所有输入目标文件中的.bss段和COMMON段（未初始化的全局变量）合并到输出文件的.bss段，并且按照4字节对齐。同时，__bss_end=.将当前位置标记为

2.链接脚本在makefile中的修改
有了链接脚本 可以将makeifle中的连接语句后面指定的链接地址改为链接脚本名称
arm-linux-gnueabihf-ld -Ttext 0X87800000 -o ledc.elf $^
                     |
arm-linux-gnueabihf-ld -Timx6ull.lds -o ledc.elf $^

3.链接脚本的作用
在 Linux 里面初始化函数就会放到 init 段里面。因此我们需要能够
自定义一些段，这些段的起始地址我们可以自由指定，同样的我们也可以指定一个文件或者函
数应该存放到哪个段里面去。要完成这个功能我们就需要使用到链接脚本，看名字就知道链接
脚本主要用于链接的，用于描述文件应该如何被链接在一起形成最终的可执行文件。其主要目
的是描述输入文件中的段如何被映射到输出文件中，并且控制输出文件中的内存排布。比如我
们编译生成的文件一般都包含 text 段、 data 段等等

text段即代码段 用于存放程序的指令代码
data段即数据段 用于存放已经初始化并切初始化赋值不为0的全局变量与静态变量
bss段主要用于存放未初始化或初始化为0的全局变量与静态变量

示例如下：
SECTIONS 
{
    . = 0X10000000;
    .text : {*(.text)}
    . = 0X30000000;
    .data ALIGN(4) : { *(.data) }
    .bss ALIGN(4) : { *(.bss) }
}